# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from noco_db_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from noco_db_python_sdk.api_response import AsyncGeneratorResponse
from noco_db_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401

from noco_db_python_sdk.model.shared_view_list import SharedViewList as SharedViewListSchema
from noco_db_python_sdk.model.auth_list_base_users400_response import AuthListBaseUsers400Response as AuthListBaseUsers400ResponseSchema

from noco_db_python_sdk.type.shared_view_list import SharedViewList
from noco_db_python_sdk.type.auth_list_base_users400_response import AuthListBaseUsers400Response

from ...api_client import Dictionary
from noco_db_python_sdk.pydantic.shared_view_list import SharedViewList as SharedViewListPydantic
from noco_db_python_sdk.pydantic.auth_list_base_users400_response import AuthListBaseUsers400Response as AuthListBaseUsers400ResponsePydantic

# Query params


class FieldsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.AnyTypeSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FieldsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class SortSchema(
    schemas.ComposedSchema,
):


    class MetaOapg:
        
        
        class one_of_0(
            schemas.ListSchema
        ):
        
        
            class MetaOapg:
                items = schemas.StrSchema
        
            def __new__(
                cls,
                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_0':
                return super().__new__(
                    cls,
                    arg,
                    _configuration=_configuration,
                )
        
            def __getitem__(self, i: int) -> MetaOapg.items:
                return super().__getitem__(i)
        one_of_1 = schemas.StrSchema
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
                cls.one_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SortSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
FromDateSchema = schemas.StrSchema
ToDateSchema = schemas.StrSchema
WhereSchema = schemas.StrSchema


class OffsetSchema(
    schemas.IntSchema
):
    pass


class LimitSchema(
    schemas.IntSchema
):
    pass
SortArrJsonSchema = schemas.StrSchema
FilterArrJsonSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'fields': typing.Union[FieldsSchema, list, tuple, ],
        'sort': typing.Union[SortSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        'from_date': typing.Union[FromDateSchema, str, ],
        'to_date': typing.Union[ToDateSchema, str, ],
        'where': typing.Union[WhereSchema, str, ],
        'offset': typing.Union[OffsetSchema, decimal.Decimal, int, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
        'sortArrJson': typing.Union[SortArrJsonSchema, str, ],
        'filterArrJson': typing.Union[FilterArrJsonSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_fields = api_client.QueryParameter(
    name="fields",
    style=api_client.ParameterStyle.FORM,
    schema=FieldsSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
    explode=True,
)
request_query_from_date = api_client.QueryParameter(
    name="from_date",
    style=api_client.ParameterStyle.FORM,
    schema=FromDateSchema,
    explode=True,
)
request_query_to_date = api_client.QueryParameter(
    name="to_date",
    style=api_client.ParameterStyle.FORM,
    schema=ToDateSchema,
    explode=True,
)
request_query_where = api_client.QueryParameter(
    name="where",
    style=api_client.ParameterStyle.FORM,
    schema=WhereSchema,
    explode=True,
)
request_query_offset = api_client.QueryParameter(
    name="offset",
    style=api_client.ParameterStyle.FORM,
    schema=OffsetSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_sort_arr_json = api_client.QueryParameter(
    name="sortArrJson",
    style=api_client.ParameterStyle.FORM,
    schema=SortArrJsonSchema,
    explode=True,
)
request_query_filter_arr_json = api_client.QueryParameter(
    name="filterArrJson",
    style=api_client.ParameterStyle.FORM,
    schema=FilterArrJsonSchema,
    explode=True,
)
# Header params
XcPasswordSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'xc-password': typing.Union[XcPasswordSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_xc_password = api_client.HeaderParameter(
    name="xc-password",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XcPasswordSchema,
)
# Path params
SharedViewUuidSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'sharedViewUuid': typing.Union[SharedViewUuidSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_shared_view_uuid = api_client.PathParameter(
    name="sharedViewUuid",
    style=api_client.ParameterStyle.SIMPLE,
    schema=SharedViewUuidSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = SharedViewListSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: SharedViewList


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: SharedViewList


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = AuthListBaseUsers400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: AuthListBaseUsers400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: AuthListBaseUsers400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _calendar_view_list_shared_rows_mapped_args(
        self,
        shared_view_uuid: str,
        xc_password: typing.Optional[str] = None,
        fields: typing.Optional[typing.List[typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sort: typing.Optional[typing.Union[typing.List[str], str]] = None,
        from_date: typing.Optional[str] = None,
        to_date: typing.Optional[str] = None,
        where: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort_arr_json: typing.Optional[str] = None,
        filter_arr_json: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _header_params = {}
        _path_params = {}
        if fields is not None:
            _query_params["fields"] = fields
        if sort is not None:
            _query_params["sort"] = sort
        if from_date is not None:
            _query_params["from_date"] = from_date
        if to_date is not None:
            _query_params["to_date"] = to_date
        if where is not None:
            _query_params["where"] = where
        if offset is not None:
            _query_params["offset"] = offset
        if limit is not None:
            _query_params["limit"] = limit
        if sort_arr_json is not None:
            _query_params["sortArrJson"] = sort_arr_json
        if filter_arr_json is not None:
            _query_params["filterArrJson"] = filter_arr_json
        if xc_password is not None:
            _header_params["xc-password"] = xc_password
        if shared_view_uuid is not None:
            _path_params["sharedViewUuid"] = shared_view_uuid
        args.query = _query_params
        args.header = _header_params
        args.path = _path_params
        return args

    async def _acalendar_view_list_shared_rows_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        List Shared View Rows
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_shared_view_uuid,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_fields,
            request_query_sort,
            request_query_from_date,
            request_query_to_date,
            request_query_where,
            request_query_offset,
            request_query_limit,
            request_query_sort_arr_json,
            request_query_filter_arr_json,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_xc_password,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v2/public/calendar-view/{sharedViewUuid}',
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _calendar_view_list_shared_rows_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        List Shared View Rows
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_shared_view_uuid,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_fields,
            request_query_sort,
            request_query_from_date,
            request_query_to_date,
            request_query_where,
            request_query_offset,
            request_query_limit,
            request_query_sort_arr_json,
            request_query_filter_arr_json,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_xc_password,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v2/public/calendar-view/{sharedViewUuid}',
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CalendarViewListSharedRowsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acalendar_view_list_shared_rows(
        self,
        shared_view_uuid: str,
        xc_password: typing.Optional[str] = None,
        fields: typing.Optional[typing.List[typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sort: typing.Optional[typing.Union[typing.List[str], str]] = None,
        from_date: typing.Optional[str] = None,
        to_date: typing.Optional[str] = None,
        where: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort_arr_json: typing.Optional[str] = None,
        filter_arr_json: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._calendar_view_list_shared_rows_mapped_args(
            shared_view_uuid=shared_view_uuid,
            xc_password=xc_password,
            fields=fields,
            sort=sort,
            from_date=from_date,
            to_date=to_date,
            where=where,
            offset=offset,
            limit=limit,
            sort_arr_json=sort_arr_json,
            filter_arr_json=filter_arr_json,
        )
        return await self._acalendar_view_list_shared_rows_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def calendar_view_list_shared_rows(
        self,
        shared_view_uuid: str,
        xc_password: typing.Optional[str] = None,
        fields: typing.Optional[typing.List[typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sort: typing.Optional[typing.Union[typing.List[str], str]] = None,
        from_date: typing.Optional[str] = None,
        to_date: typing.Optional[str] = None,
        where: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort_arr_json: typing.Optional[str] = None,
        filter_arr_json: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._calendar_view_list_shared_rows_mapped_args(
            shared_view_uuid=shared_view_uuid,
            xc_password=xc_password,
            fields=fields,
            sort=sort,
            from_date=from_date,
            to_date=to_date,
            where=where,
            offset=offset,
            limit=limit,
            sort_arr_json=sort_arr_json,
            filter_arr_json=filter_arr_json,
        )
        return self._calendar_view_list_shared_rows_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
        )

class CalendarViewListSharedRows(BaseApi):

    async def acalendar_view_list_shared_rows(
        self,
        shared_view_uuid: str,
        xc_password: typing.Optional[str] = None,
        fields: typing.Optional[typing.List[typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sort: typing.Optional[typing.Union[typing.List[str], str]] = None,
        from_date: typing.Optional[str] = None,
        to_date: typing.Optional[str] = None,
        where: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort_arr_json: typing.Optional[str] = None,
        filter_arr_json: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> SharedViewListPydantic:
        raw_response = await self.raw.acalendar_view_list_shared_rows(
            shared_view_uuid=shared_view_uuid,
            xc_password=xc_password,
            fields=fields,
            sort=sort,
            from_date=from_date,
            to_date=to_date,
            where=where,
            offset=offset,
            limit=limit,
            sort_arr_json=sort_arr_json,
            filter_arr_json=filter_arr_json,
            **kwargs,
        )
        if validate:
            return SharedViewListPydantic(**raw_response.body)
        return api_client.construct_model_instance(SharedViewListPydantic, raw_response.body)
    
    
    def calendar_view_list_shared_rows(
        self,
        shared_view_uuid: str,
        xc_password: typing.Optional[str] = None,
        fields: typing.Optional[typing.List[typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sort: typing.Optional[typing.Union[typing.List[str], str]] = None,
        from_date: typing.Optional[str] = None,
        to_date: typing.Optional[str] = None,
        where: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort_arr_json: typing.Optional[str] = None,
        filter_arr_json: typing.Optional[str] = None,
        validate: bool = False,
    ) -> SharedViewListPydantic:
        raw_response = self.raw.calendar_view_list_shared_rows(
            shared_view_uuid=shared_view_uuid,
            xc_password=xc_password,
            fields=fields,
            sort=sort,
            from_date=from_date,
            to_date=to_date,
            where=where,
            offset=offset,
            limit=limit,
            sort_arr_json=sort_arr_json,
            filter_arr_json=filter_arr_json,
        )
        if validate:
            return SharedViewListPydantic(**raw_response.body)
        return api_client.construct_model_instance(SharedViewListPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        shared_view_uuid: str,
        xc_password: typing.Optional[str] = None,
        fields: typing.Optional[typing.List[typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sort: typing.Optional[typing.Union[typing.List[str], str]] = None,
        from_date: typing.Optional[str] = None,
        to_date: typing.Optional[str] = None,
        where: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort_arr_json: typing.Optional[str] = None,
        filter_arr_json: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._calendar_view_list_shared_rows_mapped_args(
            shared_view_uuid=shared_view_uuid,
            xc_password=xc_password,
            fields=fields,
            sort=sort,
            from_date=from_date,
            to_date=to_date,
            where=where,
            offset=offset,
            limit=limit,
            sort_arr_json=sort_arr_json,
            filter_arr_json=filter_arr_json,
        )
        return await self._acalendar_view_list_shared_rows_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        shared_view_uuid: str,
        xc_password: typing.Optional[str] = None,
        fields: typing.Optional[typing.List[typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sort: typing.Optional[typing.Union[typing.List[str], str]] = None,
        from_date: typing.Optional[str] = None,
        to_date: typing.Optional[str] = None,
        where: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort_arr_json: typing.Optional[str] = None,
        filter_arr_json: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._calendar_view_list_shared_rows_mapped_args(
            shared_view_uuid=shared_view_uuid,
            xc_password=xc_password,
            fields=fields,
            sort=sort,
            from_date=from_date,
            to_date=to_date,
            where=where,
            offset=offset,
            limit=limit,
            sort_arr_json=sort_arr_json,
            filter_arr_json=filter_arr_json,
        )
        return self._calendar_view_list_shared_rows_oapg(
            query_params=args.query,
            header_params=args.header,
            path_params=args.path,
        )

