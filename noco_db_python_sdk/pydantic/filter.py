# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from noco_db_python_sdk.pydantic.id import Id
from noco_db_python_sdk.pydantic.string_or_null import StringOrNull

class Filter(BaseModel):
    # Unqiue Source ID
    source_id: typing.Optional[str] = Field(None, alias='source_id')

    # Children filters. Available when the filter is grouped.
    children: typing.Optional['typing.List["Filter"]'] = Field(None, alias='children')

    # Comparison Operator
    comparison_op: typing.Optional[Literal["allof", "anyof", "blank", "btw", "checked", "empty", "eq", "ge", "gt", "gte", "in", "is", "isWithin", "isnot", "le", "like", "lt", "lte", "nallof", "nanyof", "nbtw", "neq", "nlike", "not", "notblank", "notchecked", "notempty", "notnull", "null"]] = Field(None, alias='comparison_op')

    # Comparison Sub-Operator
    comparison_sub_op: typing.Optional[Literal["daysAgo", "daysFromNow", "exactDate", "nextMonth", "nextNumberOfDays", "nextWeek", "nextYear", "oneMonthAgo", "oneMonthFromNow", "oneWeekAgo", "oneWeekFromNow", "pastMonth", "pastNumberOfDays", "pastWeek", "pastYear", "today", "tomorrow", "yesterday"]] = Field(None, alias='comparison_sub_op')

    fk_column_id: typing.Optional[StringOrNull] = Field(None, alias='fk_column_id')

    fk_hook_id: typing.Optional[StringOrNull] = Field(None, alias='fk_hook_id')

    fk_model_id: typing.Optional[Id] = Field(None, alias='fk_model_id')

    fk_parent_id: typing.Optional[StringOrNull] = Field(None, alias='fk_parent_id')

    fk_view_id: typing.Optional[StringOrNull] = Field(None, alias='fk_view_id')

    id: typing.Optional[Id] = Field(None, alias='id')

    # Is this filter grouped?
    is_group: typing.Optional[typing.Union[bool, int, none_type]] = Field(None, alias='is_group')

    # Logical Operator
    logical_op: typing.Optional[Literal["and", "not", "or"]] = Field(None, alias='logical_op')

    # Unique Base ID
    base_id: typing.Optional[str] = Field(None, alias='base_id')

    # The filter value. Can be NULL for some operators.
    value: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='value')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
