# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from noco_db_python_sdk.pydantic.id import Id

class Audit(BaseModel):
    # Description of the action
    description: typing.Optional[str] = Field(None, alias='description')

    id: typing.Optional[Id] = Field(None, alias='id')

    # The user name performing the action
    user: typing.Optional[str] = Field(None, alias='user')

    # The display name of user performing the action
    display_name: typing.Optional[str] = Field(None, alias='display_name')

    # IP address from the user
    ip: typing.Optional[str] = Field(None, alias='ip')

    # Source ID in where action is performed
    source_id: typing.Optional[str] = Field(None, alias='source_id')

    # Base ID in where action is performed
    base_id: typing.Optional[str] = Field(None, alias='base_id')

    # Model ID in where action is performed
    fk_model_id: typing.Optional[str] = Field(None, alias='fk_model_id')

    # Row ID
    row_id: typing.Optional[str] = Field(None, alias='row_id')

    # Operation Type
    op_type: typing.Optional[Literal["COMMENT", "DATA", "PROJECT", "VIRTUAL_RELATION", "RELATION", "TABLE_VIEW", "TABLE", "VIEW", "META", "WEBHOOKS", "AUTHENTICATION", "TABLE_COLUMN", "ORG_USER"]] = Field(None, alias='op_type')

    # Operation Sub Type
    op_sub_type: typing.Optional[Literal["UPDATE", "INSERT", "BULK_INSERT", "BULK_UPDATE", "BULK_DELETE", "LINK_RECORD", "UNLINK_RECORD", "DELETE", "CREATE", "RENAME", "IMPORT_FROM_ZIP", "EXPORT_TO_FS", "EXPORT_TO_ZIP", "SIGNIN", "SIGNUP", "PASSWORD_RESET", "PASSWORD_FORGOT", "PASSWORD_CHANGE", "EMAIL_VERIFICATION", "ROLES_MANAGEMENT", "INVITE", "RESEND_INVITE"]] = Field(None, alias='op_sub_type')

    # Audit Status
    status: typing.Optional[str] = Field(None, alias='status')

    # Detail
    details: typing.Optional[str] = Field(None, alias='details')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
