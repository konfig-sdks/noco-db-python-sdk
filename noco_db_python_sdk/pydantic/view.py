# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from noco_db_python_sdk.pydantic.form import Form
from noco_db_python_sdk.pydantic.gallery import Gallery
from noco_db_python_sdk.pydantic.grid import Grid
from noco_db_python_sdk.pydantic.id import Id
from noco_db_python_sdk.pydantic.kanban import Kanban
from noco_db_python_sdk.pydantic.map import Map
from noco_db_python_sdk.pydantic.meta import Meta
from noco_db_python_sdk.pydantic.model_bool import ModelBool
from noco_db_python_sdk.pydantic.string_or_null import StringOrNull

class View(BaseModel):
    # View Title
    title: str = Field(alias='title')

    fk_model_id: Id = Field(alias='fk_model_id')

    show: ModelBool = Field(alias='show')

    # View Type
    type: typing.Union[int, float] = Field(alias='type')

    source_id: typing.Optional[Id] = Field(None, alias='source_id')

    id: typing.Optional[Id] = Field(None, alias='id')

    # Lock Type of the view
    lock_type: typing.Optional[Literal["collaborative", "locked", "personal"]] = Field(None, alias='lock_type')

    meta: typing.Optional[Meta] = Field(None, alias='meta')

    # The rder of the list of views
    order: typing.Optional[typing.Union[int, float]] = Field(None, alias='order')

    password: typing.Optional[StringOrNull] = Field(None, alias='password')

    base_id: typing.Optional[Id] = Field(None, alias='base_id')

    show_system_fields: typing.Optional[ModelBool] = Field(None, alias='show_system_fields')

    is_default: typing.Optional[ModelBool] = Field(None, alias='is_default')

    uuid: typing.Optional[StringOrNull] = Field(None, alias='uuid')

    # Associated View Model
    view: typing.Optional[typing.Union[Form, Gallery, Grid, Kanban, Map]] = Field(None, alias='view')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
