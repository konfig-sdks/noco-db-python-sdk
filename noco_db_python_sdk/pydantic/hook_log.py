# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from noco_db_python_sdk.pydantic.model_bool import ModelBool
from noco_db_python_sdk.pydantic.string_or_null import StringOrNull

class HookLog(BaseModel):
    # Unique Source ID
    source_id: typing.Optional[str] = Field(None, alias='source_id')

    # Hook Conditions
    conditions: typing.Optional[str] = Field(None, alias='conditions')

    error: typing.Optional[StringOrNull] = Field(None, alias='error')

    error_code: typing.Optional[StringOrNull] = Field(None, alias='error_code')

    error_message: typing.Optional[StringOrNull] = Field(None, alias='error_message')

    # Hook Event
    event: typing.Optional[Literal["after", "before"]] = Field(None, alias='event')

    # Execution Time in milliseconds
    execution_time: typing.Optional[str] = Field(None, alias='execution_time')

    fk_hook_id: typing.Optional[StringOrNull] = Field(None, alias='fk_hook_id')

    id: typing.Optional[StringOrNull] = Field(None, alias='id')

    # Hook Notification
    notifications: typing.Optional[str] = Field(None, alias='notifications')

    # Hook Operation
    operation: typing.Optional[Literal["insert", "update", "delete", "bulkInsert", "bulkUpdate", "bulkDelete"]] = Field(None, alias='operation')

    # Hook Payload
    payload: typing.Optional[str] = Field(None, alias='payload')

    # Base ID
    base_id: typing.Optional[str] = Field(None, alias='base_id')

    response: typing.Optional[StringOrNull] = Field(None, alias='response')

    test_call: typing.Optional[ModelBool] = Field(None, alias='test_call')

    triggered_by: typing.Optional[StringOrNull] = Field(None, alias='triggered_by')

    # Hook Type
    type: typing.Optional[str] = Field(None, alias='type')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
