# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from noco_db_python_sdk.pydantic.id import Id
from noco_db_python_sdk.pydantic.model_bool import ModelBool
from noco_db_python_sdk.pydantic.string_or_null import StringOrNull

class HookReq(BaseModel):
    # Hook Title
    title: str = Field(alias='title')

    # Event Type for the operation
    event: Literal["after", "before"] = Field(alias='event')

    # Hook Notification including info such as type, payload, method, body, and etc
    notification: typing.Union[bool, date, datetime, dict, float, int, list, str, None] = Field(alias='notification')

    # Hook Operation
    operation: Literal["insert", "update", "delete", "bulkInsert", "bulkUpdate", "bulkDelete"] = Field(alias='operation')

    description: typing.Optional[StringOrNull] = Field(None, alias='description')

    active: typing.Optional[ModelBool] = Field(None, alias='active')

    async_: typing.Optional[ModelBool] = Field(None, alias='async')

    # Environment for the hook
    env: typing.Optional[str] = Field(None, alias='env')

    # Foreign Key to Model
    fk_model_id: typing.Optional[str] = Field(None, alias='fk_model_id')

    id: typing.Optional[Id] = Field(None, alias='id')

    # Retry Count
    retries: typing.Optional[typing.Union[int, float]] = Field(None, alias='retries')

    # Retry Interval
    retry_interval: typing.Optional[typing.Union[int, float]] = Field(None, alias='retry_interval')

    # Timeout
    timeout: typing.Optional[typing.Union[int, float]] = Field(None, alias='timeout')

    # Hook Type
    type: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='type')

    condition: typing.Optional[ModelBool] = Field(None, alias='condition')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
