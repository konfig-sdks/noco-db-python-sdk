# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from noco_db_python_sdk.pydantic.id import Id
from noco_db_python_sdk.pydantic.model_bool import ModelBool
from noco_db_python_sdk.pydantic.string_or_null import StringOrNull

class Plugin(BaseModel):
    # Plugin tags
    tags: typing.Optional[str] = Field(None, alias='tags')

    # Plugin Title
    title: typing.Optional[str] = Field(None, alias='title')

    # Plugin Description
    description: typing.Optional[str] = Field(None, alias='description')

    # Plugin Version
    version: typing.Optional[str] = Field(None, alias='version')

    active: typing.Optional[ModelBool] = Field(None, alias='active')

    # Plugin Category
    category: typing.Optional[str] = Field(None, alias='category')

    # Plugin Creator (Not in use)
    creator: typing.Optional[str] = Field(None, alias='creator')

    # Plugin Creator website (Not in use)
    creator_website: typing.Optional[str] = Field(None, alias='creator_website')

    # Documentation of plugin (Not in use)
    docs: typing.Optional[str] = Field(None, alias='docs')

    # Plugin Icon (Not in use)
    icon: typing.Optional[str] = Field(None, alias='icon')

    id: typing.Optional[Id] = Field(None, alias='id')

    # Plugin Input
    input: typing.Optional[typing.Union[StringOrNull, int]] = Field(None, alias='input')

    # Plugin Input Schema 
    input_schema: typing.Optional[str] = Field(None, alias='input_schema')

    # Plugin logo
    logo: typing.Optional[str] = Field(None, alias='logo')

    # Plugin Price (Not in use)
    price: typing.Optional[str] = Field(None, alias='price')

    # Plugin Rating (Not in use)
    rating: typing.Optional[typing.Union[int, float]] = Field(None, alias='rating')

    # Plugin Status
    status: typing.Optional[str] = Field(None, alias='status')

    # Not in use
    status_details: typing.Optional[str] = Field(None, alias='status_details')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
