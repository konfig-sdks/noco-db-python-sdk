# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class ProjectReq(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for Base Request
    """


    class MetaOapg:
        required = {
            "title",
        }
        
        class properties:
            
            
            class title(
                schemas.StrSchema
            ):
                pass
            description = schemas.StrSchema
            
            
            class sources(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BaseReq']:
                        return BaseReq
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BaseReq'], typing.List['BaseReq']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sources':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BaseReq':
                    return super().__getitem__(i)
            
            
            class color(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def status() -> typing.Type['StringOrNull']:
                return StringOrNull
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DATABASE(cls):
                    return cls("database")
                
                @schemas.classproperty
                def DOCUMENTATION(cls):
                    return cls("documentation")
                
                @schemas.classproperty
                def DASHBOARD(cls):
                    return cls("dashboard")
        
            @staticmethod
            def linked_db_project_ids() -> typing.Type['ProjectReqLinkedDbProjectIds']:
                return ProjectReqLinkedDbProjectIds
        
            @staticmethod
            def meta() -> typing.Type['Meta']:
                return Meta
            __annotations__ = {
                "title": title,
                "description": description,
                "sources": sources,
                "color": color,
                "status": status,
                "type": type,
                "linked_db_project_ids": linked_db_project_ids,
                "meta": meta,
            }
    
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sources"]) -> MetaOapg.properties.sources: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'StringOrNull': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linked_db_project_ids"]) -> 'ProjectReqLinkedDbProjectIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'Meta': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "sources", "color", "status", "type", "linked_db_project_ids", "meta", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sources"]) -> typing.Union[MetaOapg.properties.sources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union[MetaOapg.properties.color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['StringOrNull', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linked_db_project_ids"]) -> typing.Union['ProjectReqLinkedDbProjectIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union['Meta', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "sources", "color", "status", "type", "linked_db_project_ids", "meta", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        sources: typing.Union[MetaOapg.properties.sources, list, tuple, schemas.Unset] = schemas.unset,
        color: typing.Union[MetaOapg.properties.color, str, schemas.Unset] = schemas.unset,
        status: typing.Union['StringOrNull', schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        linked_db_project_ids: typing.Union['ProjectReqLinkedDbProjectIds', schemas.Unset] = schemas.unset,
        meta: typing.Union['Meta', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectReq':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            sources=sources,
            color=color,
            status=status,
            type=type,
            linked_db_project_ids=linked_db_project_ids,
            meta=meta,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.base_req import BaseReq
from noco_db_python_sdk.model.meta import Meta
from noco_db_python_sdk.model.project_req_linked_db_project_ids import ProjectReqLinkedDbProjectIds
from noco_db_python_sdk.model.string_or_null import StringOrNull
