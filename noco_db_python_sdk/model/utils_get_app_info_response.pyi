# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class UtilsGetAppInfoResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            authType = schemas.StrSchema
            baseHasAdmin = schemas.BoolSchema
            firstUser = schemas.BoolSchema
            type = schemas.StrSchema
            googleAuthEnabled = schemas.BoolSchema
            githubAuthEnabled = schemas.BoolSchema
            oneClick = schemas.BoolSchema
            connectToExternalDB = schemas.BoolSchema
            defaultLimit = schemas.NumberSchema
            ncMin = schemas.BoolSchema
            teleEnabled = schemas.BoolSchema
            auditEnabled = schemas.BoolSchema
            ncSiteUrl = schemas.StrSchema
            ee = schemas.BoolSchema
            ncAttachmentFieldSize = schemas.NumberSchema
            ncMaxAttachmentsAllowed = schemas.NumberSchema
            isCloud = schemas.BoolSchema
            
            
            class automationLogLevel(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
                
                @schemas.classproperty
                def ALL(cls):
                    return cls("ALL")
            __annotations__ = {
                "version": version,
                "authType": authType,
                "baseHasAdmin": baseHasAdmin,
                "firstUser": firstUser,
                "type": type,
                "googleAuthEnabled": googleAuthEnabled,
                "githubAuthEnabled": githubAuthEnabled,
                "oneClick": oneClick,
                "connectToExternalDB": connectToExternalDB,
                "defaultLimit": defaultLimit,
                "ncMin": ncMin,
                "teleEnabled": teleEnabled,
                "auditEnabled": auditEnabled,
                "ncSiteUrl": ncSiteUrl,
                "ee": ee,
                "ncAttachmentFieldSize": ncAttachmentFieldSize,
                "ncMaxAttachmentsAllowed": ncMaxAttachmentsAllowed,
                "isCloud": isCloud,
                "automationLogLevel": automationLogLevel,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authType"]) -> MetaOapg.properties.authType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseHasAdmin"]) -> MetaOapg.properties.baseHasAdmin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstUser"]) -> MetaOapg.properties.firstUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["googleAuthEnabled"]) -> MetaOapg.properties.googleAuthEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["githubAuthEnabled"]) -> MetaOapg.properties.githubAuthEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oneClick"]) -> MetaOapg.properties.oneClick: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectToExternalDB"]) -> MetaOapg.properties.connectToExternalDB: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultLimit"]) -> MetaOapg.properties.defaultLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ncMin"]) -> MetaOapg.properties.ncMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teleEnabled"]) -> MetaOapg.properties.teleEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auditEnabled"]) -> MetaOapg.properties.auditEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ncSiteUrl"]) -> MetaOapg.properties.ncSiteUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ee"]) -> MetaOapg.properties.ee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ncAttachmentFieldSize"]) -> MetaOapg.properties.ncAttachmentFieldSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ncMaxAttachmentsAllowed"]) -> MetaOapg.properties.ncMaxAttachmentsAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCloud"]) -> MetaOapg.properties.isCloud: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["automationLogLevel"]) -> MetaOapg.properties.automationLogLevel: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "authType", "baseHasAdmin", "firstUser", "type", "googleAuthEnabled", "githubAuthEnabled", "oneClick", "connectToExternalDB", "defaultLimit", "ncMin", "teleEnabled", "auditEnabled", "ncSiteUrl", "ee", "ncAttachmentFieldSize", "ncMaxAttachmentsAllowed", "isCloud", "automationLogLevel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authType"]) -> typing.Union[MetaOapg.properties.authType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseHasAdmin"]) -> typing.Union[MetaOapg.properties.baseHasAdmin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstUser"]) -> typing.Union[MetaOapg.properties.firstUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["googleAuthEnabled"]) -> typing.Union[MetaOapg.properties.googleAuthEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["githubAuthEnabled"]) -> typing.Union[MetaOapg.properties.githubAuthEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oneClick"]) -> typing.Union[MetaOapg.properties.oneClick, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectToExternalDB"]) -> typing.Union[MetaOapg.properties.connectToExternalDB, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultLimit"]) -> typing.Union[MetaOapg.properties.defaultLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ncMin"]) -> typing.Union[MetaOapg.properties.ncMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teleEnabled"]) -> typing.Union[MetaOapg.properties.teleEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auditEnabled"]) -> typing.Union[MetaOapg.properties.auditEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ncSiteUrl"]) -> typing.Union[MetaOapg.properties.ncSiteUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ee"]) -> typing.Union[MetaOapg.properties.ee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ncAttachmentFieldSize"]) -> typing.Union[MetaOapg.properties.ncAttachmentFieldSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ncMaxAttachmentsAllowed"]) -> typing.Union[MetaOapg.properties.ncMaxAttachmentsAllowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCloud"]) -> typing.Union[MetaOapg.properties.isCloud, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["automationLogLevel"]) -> typing.Union[MetaOapg.properties.automationLogLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "authType", "baseHasAdmin", "firstUser", "type", "googleAuthEnabled", "githubAuthEnabled", "oneClick", "connectToExternalDB", "defaultLimit", "ncMin", "teleEnabled", "auditEnabled", "ncSiteUrl", "ee", "ncAttachmentFieldSize", "ncMaxAttachmentsAllowed", "isCloud", "automationLogLevel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        authType: typing.Union[MetaOapg.properties.authType, str, schemas.Unset] = schemas.unset,
        baseHasAdmin: typing.Union[MetaOapg.properties.baseHasAdmin, bool, schemas.Unset] = schemas.unset,
        firstUser: typing.Union[MetaOapg.properties.firstUser, bool, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        googleAuthEnabled: typing.Union[MetaOapg.properties.googleAuthEnabled, bool, schemas.Unset] = schemas.unset,
        githubAuthEnabled: typing.Union[MetaOapg.properties.githubAuthEnabled, bool, schemas.Unset] = schemas.unset,
        oneClick: typing.Union[MetaOapg.properties.oneClick, bool, schemas.Unset] = schemas.unset,
        connectToExternalDB: typing.Union[MetaOapg.properties.connectToExternalDB, bool, schemas.Unset] = schemas.unset,
        defaultLimit: typing.Union[MetaOapg.properties.defaultLimit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ncMin: typing.Union[MetaOapg.properties.ncMin, bool, schemas.Unset] = schemas.unset,
        teleEnabled: typing.Union[MetaOapg.properties.teleEnabled, bool, schemas.Unset] = schemas.unset,
        auditEnabled: typing.Union[MetaOapg.properties.auditEnabled, bool, schemas.Unset] = schemas.unset,
        ncSiteUrl: typing.Union[MetaOapg.properties.ncSiteUrl, str, schemas.Unset] = schemas.unset,
        ee: typing.Union[MetaOapg.properties.ee, bool, schemas.Unset] = schemas.unset,
        ncAttachmentFieldSize: typing.Union[MetaOapg.properties.ncAttachmentFieldSize, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ncMaxAttachmentsAllowed: typing.Union[MetaOapg.properties.ncMaxAttachmentsAllowed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        isCloud: typing.Union[MetaOapg.properties.isCloud, bool, schemas.Unset] = schemas.unset,
        automationLogLevel: typing.Union[MetaOapg.properties.automationLogLevel, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UtilsGetAppInfoResponse':
        return super().__new__(
            cls,
            *args,
            version=version,
            authType=authType,
            baseHasAdmin=baseHasAdmin,
            firstUser=firstUser,
            type=type,
            googleAuthEnabled=googleAuthEnabled,
            githubAuthEnabled=githubAuthEnabled,
            oneClick=oneClick,
            connectToExternalDB=connectToExternalDB,
            defaultLimit=defaultLimit,
            ncMin=ncMin,
            teleEnabled=teleEnabled,
            auditEnabled=auditEnabled,
            ncSiteUrl=ncSiteUrl,
            ee=ee,
            ncAttachmentFieldSize=ncAttachmentFieldSize,
            ncMaxAttachmentsAllowed=ncMaxAttachmentsAllowed,
            isCloud=isCloud,
            automationLogLevel=automationLogLevel,
            _configuration=_configuration,
            **kwargs,
        )
