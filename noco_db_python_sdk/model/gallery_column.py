# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class GalleryColumn(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for Gallery Column
    """


    class MetaOapg:
        
        class properties:
            fk_col_id = schemas.StrSchema
            fk_gallery_id = schemas.StrSchema
            help = schemas.StrSchema
        
            @staticmethod
            def id() -> typing.Type['Id']:
                return Id
            label = schemas.StrSchema
            __annotations__ = {
                "fk_col_id": fk_col_id,
                "fk_gallery_id": fk_gallery_id,
                "help": help,
                "id": id,
                "label": label,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_col_id"]) -> MetaOapg.properties.fk_col_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_gallery_id"]) -> MetaOapg.properties.fk_gallery_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["help"]) -> MetaOapg.properties.help: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'Id': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fk_col_id", "fk_gallery_id", "help", "id", "label", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_col_id"]) -> typing.Union[MetaOapg.properties.fk_col_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_gallery_id"]) -> typing.Union[MetaOapg.properties.fk_gallery_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["help"]) -> typing.Union[MetaOapg.properties.help, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union['Id', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fk_col_id", "fk_gallery_id", "help", "id", "label", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fk_col_id: typing.Union[MetaOapg.properties.fk_col_id, str, schemas.Unset] = schemas.unset,
        fk_gallery_id: typing.Union[MetaOapg.properties.fk_gallery_id, str, schemas.Unset] = schemas.unset,
        help: typing.Union[MetaOapg.properties.help, str, schemas.Unset] = schemas.unset,
        id: typing.Union['Id', schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GalleryColumn':
        return super().__new__(
            cls,
            *args,
            fk_col_id=fk_col_id,
            fk_gallery_id=fk_gallery_id,
            help=help,
            id=id,
            label=label,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.id import Id
