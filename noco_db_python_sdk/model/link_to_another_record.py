# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class LinkToAnotherRecord(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for LinkToAnotherRecord
    """


    class MetaOapg:
        
        class properties:
            deleted = schemas.StrSchema
            dr = schemas.StrSchema
            fk_child_column_id = schemas.StrSchema
        
            @staticmethod
            def fk_column_id() -> typing.Type['Id']:
                return Id
            fk_index_name = schemas.StrSchema
            fk_mm_child_column_id = schemas.StrSchema
            fk_mm_model_id = schemas.StrSchema
            fk_mm_parent_column_id = schemas.StrSchema
            fk_parent_column_id = schemas.StrSchema
            fk_related_model_id = schemas.StrSchema
        
            @staticmethod
            def id() -> typing.Type['Id']:
                return Id
            order = schemas.StrSchema
            type = schemas.StrSchema
            ur = schemas.StrSchema
        
            @staticmethod
            def virtual() -> typing.Type['ModelBool']:
                return ModelBool
            __annotations__ = {
                "deleted": deleted,
                "dr": dr,
                "fk_child_column_id": fk_child_column_id,
                "fk_column_id": fk_column_id,
                "fk_index_name": fk_index_name,
                "fk_mm_child_column_id": fk_mm_child_column_id,
                "fk_mm_model_id": fk_mm_model_id,
                "fk_mm_parent_column_id": fk_mm_parent_column_id,
                "fk_parent_column_id": fk_parent_column_id,
                "fk_related_model_id": fk_related_model_id,
                "id": id,
                "order": order,
                "type": type,
                "ur": ur,
                "virtual": virtual,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dr"]) -> MetaOapg.properties.dr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_child_column_id"]) -> MetaOapg.properties.fk_child_column_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_column_id"]) -> 'Id': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_index_name"]) -> MetaOapg.properties.fk_index_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_mm_child_column_id"]) -> MetaOapg.properties.fk_mm_child_column_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_mm_model_id"]) -> MetaOapg.properties.fk_mm_model_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_mm_parent_column_id"]) -> MetaOapg.properties.fk_mm_parent_column_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_parent_column_id"]) -> MetaOapg.properties.fk_parent_column_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_related_model_id"]) -> MetaOapg.properties.fk_related_model_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'Id': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ur"]) -> MetaOapg.properties.ur: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["virtual"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["deleted", "dr", "fk_child_column_id", "fk_column_id", "fk_index_name", "fk_mm_child_column_id", "fk_mm_model_id", "fk_mm_parent_column_id", "fk_parent_column_id", "fk_related_model_id", "id", "order", "type", "ur", "virtual", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dr"]) -> typing.Union[MetaOapg.properties.dr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_child_column_id"]) -> typing.Union[MetaOapg.properties.fk_child_column_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_column_id"]) -> typing.Union['Id', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_index_name"]) -> typing.Union[MetaOapg.properties.fk_index_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_mm_child_column_id"]) -> typing.Union[MetaOapg.properties.fk_mm_child_column_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_mm_model_id"]) -> typing.Union[MetaOapg.properties.fk_mm_model_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_mm_parent_column_id"]) -> typing.Union[MetaOapg.properties.fk_mm_parent_column_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_parent_column_id"]) -> typing.Union[MetaOapg.properties.fk_parent_column_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_related_model_id"]) -> typing.Union[MetaOapg.properties.fk_related_model_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union['Id', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ur"]) -> typing.Union[MetaOapg.properties.ur, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["virtual"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deleted", "dr", "fk_child_column_id", "fk_column_id", "fk_index_name", "fk_mm_child_column_id", "fk_mm_model_id", "fk_mm_parent_column_id", "fk_parent_column_id", "fk_related_model_id", "id", "order", "type", "ur", "virtual", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        deleted: typing.Union[MetaOapg.properties.deleted, str, schemas.Unset] = schemas.unset,
        dr: typing.Union[MetaOapg.properties.dr, str, schemas.Unset] = schemas.unset,
        fk_child_column_id: typing.Union[MetaOapg.properties.fk_child_column_id, str, schemas.Unset] = schemas.unset,
        fk_column_id: typing.Union['Id', schemas.Unset] = schemas.unset,
        fk_index_name: typing.Union[MetaOapg.properties.fk_index_name, str, schemas.Unset] = schemas.unset,
        fk_mm_child_column_id: typing.Union[MetaOapg.properties.fk_mm_child_column_id, str, schemas.Unset] = schemas.unset,
        fk_mm_model_id: typing.Union[MetaOapg.properties.fk_mm_model_id, str, schemas.Unset] = schemas.unset,
        fk_mm_parent_column_id: typing.Union[MetaOapg.properties.fk_mm_parent_column_id, str, schemas.Unset] = schemas.unset,
        fk_parent_column_id: typing.Union[MetaOapg.properties.fk_parent_column_id, str, schemas.Unset] = schemas.unset,
        fk_related_model_id: typing.Union[MetaOapg.properties.fk_related_model_id, str, schemas.Unset] = schemas.unset,
        id: typing.Union['Id', schemas.Unset] = schemas.unset,
        order: typing.Union[MetaOapg.properties.order, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        ur: typing.Union[MetaOapg.properties.ur, str, schemas.Unset] = schemas.unset,
        virtual: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinkToAnotherRecord':
        return super().__new__(
            cls,
            *args,
            deleted=deleted,
            dr=dr,
            fk_child_column_id=fk_child_column_id,
            fk_column_id=fk_column_id,
            fk_index_name=fk_index_name,
            fk_mm_child_column_id=fk_mm_child_column_id,
            fk_mm_model_id=fk_mm_model_id,
            fk_mm_parent_column_id=fk_mm_parent_column_id,
            fk_parent_column_id=fk_parent_column_id,
            fk_related_model_id=fk_related_model_id,
            id=id,
            order=order,
            type=type,
            ur=ur,
            virtual=virtual,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.id import Id
from noco_db_python_sdk.model.model_bool import ModelBool
