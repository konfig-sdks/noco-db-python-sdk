# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class SourceUpdateDetailsRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            alias = schemas.StrSchema
            type = schemas.StrSchema
        
            @staticmethod
            def config() -> typing.Type['SourceUpdateDetailsRequestConfig']:
                return SourceUpdateDetailsRequestConfig
            inflection_column = schemas.StrSchema
            inflection_table = schemas.StrSchema
            __annotations__ = {
                "alias": alias,
                "type": type,
                "config": config,
                "inflection_column": inflection_column,
                "inflection_table": inflection_table,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alias"]) -> MetaOapg.properties.alias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config"]) -> 'SourceUpdateDetailsRequestConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inflection_column"]) -> MetaOapg.properties.inflection_column: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inflection_table"]) -> MetaOapg.properties.inflection_table: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["alias", "type", "config", "inflection_column", "inflection_table", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alias"]) -> typing.Union[MetaOapg.properties.alias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union['SourceUpdateDetailsRequestConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inflection_column"]) -> typing.Union[MetaOapg.properties.inflection_column, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inflection_table"]) -> typing.Union[MetaOapg.properties.inflection_table, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["alias", "type", "config", "inflection_column", "inflection_table", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        alias: typing.Union[MetaOapg.properties.alias, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        config: typing.Union['SourceUpdateDetailsRequestConfig', schemas.Unset] = schemas.unset,
        inflection_column: typing.Union[MetaOapg.properties.inflection_column, str, schemas.Unset] = schemas.unset,
        inflection_table: typing.Union[MetaOapg.properties.inflection_table, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SourceUpdateDetailsRequest':
        return super().__new__(
            cls,
            *args,
            alias=alias,
            type=type,
            config=config,
            inflection_column=inflection_column,
            inflection_table=inflection_table,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.source_update_details_request_config import SourceUpdateDetailsRequestConfig
