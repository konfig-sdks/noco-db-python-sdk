# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class AuditRowUpdateReq(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for Audit Row Update Request
    """


    class MetaOapg:
        
        class properties:
            column_name = schemas.StrSchema
            fk_model_id = schemas.StrSchema
            row_id = schemas.StrSchema
            prev_value = schemas.AnyTypeSchema
            value = schemas.AnyTypeSchema
            __annotations__ = {
                "column_name": column_name,
                "fk_model_id": fk_model_id,
                "row_id": row_id,
                "prev_value": prev_value,
                "value": value,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["column_name"]) -> MetaOapg.properties.column_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_model_id"]) -> MetaOapg.properties.fk_model_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["row_id"]) -> MetaOapg.properties.row_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prev_value"]) -> MetaOapg.properties.prev_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["column_name", "fk_model_id", "row_id", "prev_value", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["column_name"]) -> typing.Union[MetaOapg.properties.column_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_model_id"]) -> typing.Union[MetaOapg.properties.fk_model_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["row_id"]) -> typing.Union[MetaOapg.properties.row_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prev_value"]) -> typing.Union[MetaOapg.properties.prev_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["column_name", "fk_model_id", "row_id", "prev_value", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        column_name: typing.Union[MetaOapg.properties.column_name, str, schemas.Unset] = schemas.unset,
        fk_model_id: typing.Union[MetaOapg.properties.fk_model_id, str, schemas.Unset] = schemas.unset,
        row_id: typing.Union[MetaOapg.properties.row_id, str, schemas.Unset] = schemas.unset,
        prev_value: typing.Union[MetaOapg.properties.prev_value, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuditRowUpdateReq':
        return super().__new__(
            cls,
            *args,
            column_name=column_name,
            fk_model_id=fk_model_id,
            row_id=row_id,
            prev_value=prev_value,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )
