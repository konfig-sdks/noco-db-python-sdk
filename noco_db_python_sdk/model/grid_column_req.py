# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class GridColumnReq(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for Grid Column Request
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def fk_column_id() -> typing.Type['Id']:
                return Id
            
            
            class help(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
            class label(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
            class width(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    regex=[{
                        'pattern': r'^[0-9]+(px|%)$',
                    }]
        
            @staticmethod
            def group_by() -> typing.Type['ModelBool']:
                return ModelBool
            group_by_order = schemas.NumberSchema
        
            @staticmethod
            def group_by_sort() -> typing.Type['StringOrNull']:
                return StringOrNull
            __annotations__ = {
                "fk_column_id": fk_column_id,
                "help": help,
                "label": label,
                "width": width,
                "group_by": group_by,
                "group_by_order": group_by_order,
                "group_by_sort": group_by_sort,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_column_id"]) -> 'Id': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["help"]) -> MetaOapg.properties.help: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_by"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_by_order"]) -> MetaOapg.properties.group_by_order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_by_sort"]) -> 'StringOrNull': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fk_column_id", "help", "label", "width", "group_by", "group_by_order", "group_by_sort", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_column_id"]) -> typing.Union['Id', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["help"]) -> typing.Union[MetaOapg.properties.help, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> typing.Union[MetaOapg.properties.width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_by"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_by_order"]) -> typing.Union[MetaOapg.properties.group_by_order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_by_sort"]) -> typing.Union['StringOrNull', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fk_column_id", "help", "label", "width", "group_by", "group_by_order", "group_by_sort", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fk_column_id: typing.Union['Id', schemas.Unset] = schemas.unset,
        help: typing.Union[MetaOapg.properties.help, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        width: typing.Union[MetaOapg.properties.width, str, schemas.Unset] = schemas.unset,
        group_by: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        group_by_order: typing.Union[MetaOapg.properties.group_by_order, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        group_by_sort: typing.Union['StringOrNull', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GridColumnReq':
        return super().__new__(
            cls,
            *args,
            fk_column_id=fk_column_id,
            help=help,
            label=label,
            width=width,
            group_by=group_by,
            group_by_order=group_by_order,
            group_by_sort=group_by_sort,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.id import Id
from noco_db_python_sdk.model.model_bool import ModelBool
from noco_db_python_sdk.model.string_or_null import StringOrNull
