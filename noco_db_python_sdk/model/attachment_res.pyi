# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class AttachmentRes(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for Attachment Response
    """


    class MetaOapg:
        
        
        class one_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    title = schemas.StrSchema
                    mimetype = schemas.StrSchema
                    path = schemas.StrSchema
                    size = schemas.NumberSchema
                    url = schemas.StrSchema
                    signedPath = schemas.StrSchema
                    signedUrl = schemas.StrSchema
                    __annotations__ = {
                        "title": title,
                        "mimetype": mimetype,
                        "path": path,
                        "size": size,
                        "url": url,
                        "signedPath": signedPath,
                        "signedUrl": signedUrl,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["mimetype"]) -> MetaOapg.properties.mimetype: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["signedPath"]) -> MetaOapg.properties.signedPath: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["signedUrl"]) -> MetaOapg.properties.signedUrl: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "mimetype", "path", "size", "url", "signedPath", "signedUrl", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["mimetype"]) -> typing.Union[MetaOapg.properties.mimetype, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["signedPath"]) -> typing.Union[MetaOapg.properties.signedPath, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["signedUrl"]) -> typing.Union[MetaOapg.properties.signedUrl, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "mimetype", "path", "size", "url", "signedPath", "signedUrl", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
                mimetype: typing.Union[MetaOapg.properties.mimetype, str, schemas.Unset] = schemas.unset,
                path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
                signedPath: typing.Union[MetaOapg.properties.signedPath, str, schemas.Unset] = schemas.unset,
                signedUrl: typing.Union[MetaOapg.properties.signedUrl, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'one_of_0':
                return super().__new__(
                    cls,
                    *args,
                    title=title,
                    mimetype=mimetype,
                    path=path,
                    size=size,
                    url=url,
                    signedPath=signedPath,
                    signedUrl=signedUrl,
                    _configuration=_configuration,
                    **kwargs,
                )
        one_of_1 = schemas.NoneSchema
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
                cls.one_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AttachmentRes':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
