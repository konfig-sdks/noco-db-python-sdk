# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class Source(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for Source
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def alias() -> typing.Type['StringOrNull']:
                return StringOrNull
            config = schemas.AnyTypeSchema
        
            @staticmethod
            def enabled() -> typing.Type['ModelBool']:
                return ModelBool
            id = schemas.StrSchema
            inflection_column = schemas.StrSchema
            inflection_table = schemas.StrSchema
        
            @staticmethod
            def is_meta() -> typing.Type['ModelBool']:
                return ModelBool
        
            @staticmethod
            def is_local() -> typing.Type['ModelBool']:
                return ModelBool
            order = schemas.NumberSchema
            base_id = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MSSQL(cls):
                    return cls("mssql")
                
                @schemas.classproperty
                def MYSQL(cls):
                    return cls("mysql")
                
                @schemas.classproperty
                def MYSQL2(cls):
                    return cls("mysql2")
                
                @schemas.classproperty
                def ORACLEDB(cls):
                    return cls("oracledb")
                
                @schemas.classproperty
                def PG(cls):
                    return cls("pg")
                
                @schemas.classproperty
                def SNOWFLAKE(cls):
                    return cls("snowflake")
                
                @schemas.classproperty
                def SQLITE3(cls):
                    return cls("sqlite3")
            __annotations__ = {
                "alias": alias,
                "config": config,
                "enabled": enabled,
                "id": id,
                "inflection_column": inflection_column,
                "inflection_table": inflection_table,
                "is_meta": is_meta,
                "is_local": is_local,
                "order": order,
                "base_id": base_id,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alias"]) -> 'StringOrNull': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config"]) -> MetaOapg.properties.config: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inflection_column"]) -> MetaOapg.properties.inflection_column: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inflection_table"]) -> MetaOapg.properties.inflection_table: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_meta"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_local"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["base_id"]) -> MetaOapg.properties.base_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["alias", "config", "enabled", "id", "inflection_column", "inflection_table", "is_meta", "is_local", "order", "base_id", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alias"]) -> typing.Union['StringOrNull', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union[MetaOapg.properties.config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inflection_column"]) -> typing.Union[MetaOapg.properties.inflection_column, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inflection_table"]) -> typing.Union[MetaOapg.properties.inflection_table, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_meta"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_local"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["base_id"]) -> typing.Union[MetaOapg.properties.base_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["alias", "config", "enabled", "id", "inflection_column", "inflection_table", "is_meta", "is_local", "order", "base_id", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        alias: typing.Union['StringOrNull', schemas.Unset] = schemas.unset,
        config: typing.Union[MetaOapg.properties.config, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        enabled: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        inflection_column: typing.Union[MetaOapg.properties.inflection_column, str, schemas.Unset] = schemas.unset,
        inflection_table: typing.Union[MetaOapg.properties.inflection_table, str, schemas.Unset] = schemas.unset,
        is_meta: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        is_local: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        order: typing.Union[MetaOapg.properties.order, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        base_id: typing.Union[MetaOapg.properties.base_id, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Source':
        return super().__new__(
            cls,
            *args,
            alias=alias,
            config=config,
            enabled=enabled,
            id=id,
            inflection_column=inflection_column,
            inflection_table=inflection_table,
            is_meta=is_meta,
            is_local=is_local,
            order=order,
            base_id=base_id,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.model_bool import ModelBool
from noco_db_python_sdk.model.string_or_null import StringOrNull
