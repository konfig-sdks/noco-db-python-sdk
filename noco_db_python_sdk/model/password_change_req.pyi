# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class PasswordChangeReq(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for Password Change Request
    """


    class MetaOapg:
        required = {
            "newPassword",
            "currentPassword",
        }
        
        class properties:
            currentPassword = schemas.StrSchema
            
            
            class newPassword(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "currentPassword": currentPassword,
                "newPassword": newPassword,
            }
    
    newPassword: MetaOapg.properties.newPassword
    currentPassword: MetaOapg.properties.currentPassword
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPassword"]) -> MetaOapg.properties.currentPassword: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newPassword"]) -> MetaOapg.properties.newPassword: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currentPassword", "newPassword", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPassword"]) -> MetaOapg.properties.currentPassword: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newPassword"]) -> MetaOapg.properties.newPassword: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currentPassword", "newPassword", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        newPassword: typing.Union[MetaOapg.properties.newPassword, str, ],
        currentPassword: typing.Union[MetaOapg.properties.currentPassword, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PasswordChangeReq':
        return super().__new__(
            cls,
            *args,
            newPassword=newPassword,
            currentPassword=currentPassword,
            _configuration=_configuration,
            **kwargs,
        )
