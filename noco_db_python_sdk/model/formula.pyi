# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class Formula(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for Formula
    """


    class MetaOapg:
        
        class properties:
            error = schemas.StrSchema
        
            @staticmethod
            def fk_column_id() -> typing.Type['Id']:
                return Id
            formula = schemas.StrSchema
            formula_raw = schemas.StrSchema
        
            @staticmethod
            def id() -> typing.Type['Id']:
                return Id
            __annotations__ = {
                "error": error,
                "fk_column_id": fk_column_id,
                "formula": formula,
                "formula_raw": formula_raw,
                "id": id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_column_id"]) -> 'Id': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formula"]) -> MetaOapg.properties.formula: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formula_raw"]) -> MetaOapg.properties.formula_raw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'Id': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["error", "fk_column_id", "formula", "formula_raw", "id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_column_id"]) -> typing.Union['Id', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formula"]) -> typing.Union[MetaOapg.properties.formula, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formula_raw"]) -> typing.Union[MetaOapg.properties.formula_raw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union['Id', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["error", "fk_column_id", "formula", "formula_raw", "id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        error: typing.Union[MetaOapg.properties.error, str, schemas.Unset] = schemas.unset,
        fk_column_id: typing.Union['Id', schemas.Unset] = schemas.unset,
        formula: typing.Union[MetaOapg.properties.formula, str, schemas.Unset] = schemas.unset,
        formula_raw: typing.Union[MetaOapg.properties.formula_raw, str, schemas.Unset] = schemas.unset,
        id: typing.Union['Id', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Formula':
        return super().__new__(
            cls,
            *args,
            error=error,
            fk_column_id=fk_column_id,
            formula=formula,
            formula_raw=formula_raw,
            id=id,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.id import Id
