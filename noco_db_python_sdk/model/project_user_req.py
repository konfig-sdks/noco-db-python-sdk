# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class ProjectUserReq(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for Base User Request
    """


    class MetaOapg:
        required = {
            "roles",
            "email",
        }
        
        class properties:
            email = schemas.StrSchema
            
            
            class roles(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "no-access": "NOACCESS",
                        "commenter": "COMMENTER",
                        "editor": "EDITOR",
                        "guest": "GUEST",
                        "owner": "OWNER",
                        "viewer": "VIEWER",
                        "creator": "CREATOR",
                    }
                
                @schemas.classproperty
                def NOACCESS(cls):
                    return cls("no-access")
                
                @schemas.classproperty
                def COMMENTER(cls):
                    return cls("commenter")
                
                @schemas.classproperty
                def EDITOR(cls):
                    return cls("editor")
                
                @schemas.classproperty
                def GUEST(cls):
                    return cls("guest")
                
                @schemas.classproperty
                def OWNER(cls):
                    return cls("owner")
                
                @schemas.classproperty
                def VIEWER(cls):
                    return cls("viewer")
                
                @schemas.classproperty
                def CREATOR(cls):
                    return cls("creator")
            __annotations__ = {
                "email": email,
                "roles": roles,
            }
    
    roles: MetaOapg.properties.roles
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "roles", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "roles", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        roles: typing.Union[MetaOapg.properties.roles, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectUserReq':
        return super().__new__(
            cls,
            *args,
            roles=roles,
            email=email,
            _configuration=_configuration,
            **kwargs,
        )
