# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class SignUpReq(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for Signup Request
    """


    class MetaOapg:
        required = {
            "password",
            "email",
        }
        
        class properties:
            email = schemas.StrSchema
            
            
            class password(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 8
        
            @staticmethod
            def firstname() -> typing.Type['StringOrNull']:
                return StringOrNull
        
            @staticmethod
            def lastname() -> typing.Type['StringOrNull']:
                return StringOrNull
        
            @staticmethod
            def token() -> typing.Type['StringOrNull']:
                return StringOrNull
        
            @staticmethod
            def ignore_subscribe() -> typing.Type['ModelBool']:
                return ModelBool
            __annotations__ = {
                "email": email,
                "password": password,
                "firstname": firstname,
                "lastname": lastname,
                "token": token,
                "ignore_subscribe": ignore_subscribe,
            }
    
    password: MetaOapg.properties.password
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstname"]) -> 'StringOrNull': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastname"]) -> 'StringOrNull': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> 'StringOrNull': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ignore_subscribe"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "password", "firstname", "lastname", "token", "ignore_subscribe", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstname"]) -> typing.Union['StringOrNull', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastname"]) -> typing.Union['StringOrNull', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union['StringOrNull', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ignore_subscribe"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "password", "firstname", "lastname", "token", "ignore_subscribe", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        password: typing.Union[MetaOapg.properties.password, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        firstname: typing.Union['StringOrNull', schemas.Unset] = schemas.unset,
        lastname: typing.Union['StringOrNull', schemas.Unset] = schemas.unset,
        token: typing.Union['StringOrNull', schemas.Unset] = schemas.unset,
        ignore_subscribe: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SignUpReq':
        return super().__new__(
            cls,
            *args,
            password=password,
            email=email,
            firstname=firstname,
            lastname=lastname,
            token=token,
            ignore_subscribe=ignore_subscribe,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.model_bool import ModelBool
from noco_db_python_sdk.model.string_or_null import StringOrNull
