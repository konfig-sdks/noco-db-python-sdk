# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class UtilsTestDbConnectionRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class client(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MSSQL(cls):
                    return cls("mssql")
                
                @schemas.classproperty
                def MYSQL(cls):
                    return cls("mysql")
                
                @schemas.classproperty
                def MYSQL2(cls):
                    return cls("mysql2")
                
                @schemas.classproperty
                def ORACLEDB(cls):
                    return cls("oracledb")
                
                @schemas.classproperty
                def PG(cls):
                    return cls("pg")
                
                @schemas.classproperty
                def SNOWFLAKE(cls):
                    return cls("snowflake")
                
                @schemas.classproperty
                def SQLITE3(cls):
                    return cls("sqlite3")
        
            @staticmethod
            def connection() -> typing.Type['UtilsTestDbConnectionRequestConnection']:
                return UtilsTestDbConnectionRequestConnection
            __annotations__ = {
                "client": client,
                "connection": connection,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client"]) -> MetaOapg.properties.client: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection"]) -> 'UtilsTestDbConnectionRequestConnection': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["client", "connection", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client"]) -> typing.Union[MetaOapg.properties.client, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection"]) -> typing.Union['UtilsTestDbConnectionRequestConnection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["client", "connection", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        client: typing.Union[MetaOapg.properties.client, str, schemas.Unset] = schemas.unset,
        connection: typing.Union['UtilsTestDbConnectionRequestConnection', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UtilsTestDbConnectionRequest':
        return super().__new__(
            cls,
            *args,
            client=client,
            connection=connection,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.utils_test_db_connection_request_connection import UtilsTestDbConnectionRequestConnection
