# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class ViewCreateReq(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for View Create Request
    """


    class MetaOapg:
        required = {
            "title",
        }
        
        class properties:
            title = schemas.StrSchema
            type = schemas.NumberSchema
        
            @staticmethod
            def copy_from_id() -> typing.Type['StringOrNull']:
                return StringOrNull
        
            @staticmethod
            def fk_grp_col_id() -> typing.Type['StringOrNull']:
                return StringOrNull
        
            @staticmethod
            def fk_geo_data_col_id() -> typing.Type['StringOrNull']:
                return StringOrNull
            __annotations__ = {
                "title": title,
                "type": type,
                "copy_from_id": copy_from_id,
                "fk_grp_col_id": fk_grp_col_id,
                "fk_geo_data_col_id": fk_geo_data_col_id,
            }
    
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copy_from_id"]) -> 'StringOrNull': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_grp_col_id"]) -> 'StringOrNull': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_geo_data_col_id"]) -> 'StringOrNull': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "type", "copy_from_id", "fk_grp_col_id", "fk_geo_data_col_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copy_from_id"]) -> typing.Union['StringOrNull', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_grp_col_id"]) -> typing.Union['StringOrNull', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_geo_data_col_id"]) -> typing.Union['StringOrNull', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "type", "copy_from_id", "fk_grp_col_id", "fk_geo_data_col_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: typing.Union[MetaOapg.properties.type, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        copy_from_id: typing.Union['StringOrNull', schemas.Unset] = schemas.unset,
        fk_grp_col_id: typing.Union['StringOrNull', schemas.Unset] = schemas.unset,
        fk_geo_data_col_id: typing.Union['StringOrNull', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ViewCreateReq':
        return super().__new__(
            cls,
            *args,
            title=title,
            type=type,
            copy_from_id=copy_from_id,
            fk_grp_col_id=fk_grp_col_id,
            fk_geo_data_col_id=fk_geo_data_col_id,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.string_or_null import StringOrNull
