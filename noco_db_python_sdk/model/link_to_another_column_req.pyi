# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class LinkToAnotherColumnReq(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for LinkToAnotherColumn Request
    """


    class MetaOapg:
        required = {
            "uidt",
            "childId",
            "title",
            "type",
            "parentId",
        }
        
        class properties:
            
            
            class title(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def childId() -> typing.Type['Id']:
                return Id
        
            @staticmethod
            def parentId() -> typing.Type['Id']:
                return Id
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BT(cls):
                    return cls("bt")
                
                @schemas.classproperty
                def HM(cls):
                    return cls("hm")
                
                @schemas.classproperty
                def MM(cls):
                    return cls("mm")
                
                @schemas.classproperty
                def OO(cls):
                    return cls("oo")
            
            
            class uidt(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def LINK_TO_ANOTHER_RECORD(cls):
                    return cls("LinkToAnotherRecord")
                
                @schemas.classproperty
                def LINKS(cls):
                    return cls("Links")
        
            @staticmethod
            def virtual() -> typing.Type['ModelBool']:
                return ModelBool
            __annotations__ = {
                "title": title,
                "childId": childId,
                "parentId": parentId,
                "type": type,
                "uidt": uidt,
                "virtual": virtual,
            }
    
    uidt: MetaOapg.properties.uidt
    childId: 'Id'
    title: MetaOapg.properties.title
    type: MetaOapg.properties.type
    parentId: 'Id'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["childId"]) -> 'Id': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentId"]) -> 'Id': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uidt"]) -> MetaOapg.properties.uidt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["virtual"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "childId", "parentId", "type", "uidt", "virtual", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["childId"]) -> 'Id': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentId"]) -> 'Id': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uidt"]) -> MetaOapg.properties.uidt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["virtual"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "childId", "parentId", "type", "uidt", "virtual", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        uidt: typing.Union[MetaOapg.properties.uidt, str, ],
        childId: 'Id',
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        parentId: 'Id',
        virtual: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinkToAnotherColumnReq':
        return super().__new__(
            cls,
            *args,
            uidt=uidt,
            childId=childId,
            title=title,
            type=type,
            parentId=parentId,
            virtual=virtual,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.id import Id
from noco_db_python_sdk.model.model_bool import ModelBool
