# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class VisibilityRuleReqItemDisabled(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def commenter() -> typing.Type['ModelBool']:
                return ModelBool
        
            @staticmethod
            def creator() -> typing.Type['ModelBool']:
                return ModelBool
        
            @staticmethod
            def editor() -> typing.Type['ModelBool']:
                return ModelBool
        
            @staticmethod
            def guest() -> typing.Type['ModelBool']:
                return ModelBool
        
            @staticmethod
            def owner() -> typing.Type['ModelBool']:
                return ModelBool
        
            @staticmethod
            def viewer() -> typing.Type['ModelBool']:
                return ModelBool
            __annotations__ = {
                "commenter": commenter,
                "creator": creator,
                "editor": editor,
                "guest": guest,
                "owner": owner,
                "viewer": viewer,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commenter"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editor"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guest"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewer"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["commenter", "creator", "editor", "guest", "owner", "viewer", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commenter"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editor"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guest"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewer"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["commenter", "creator", "editor", "guest", "owner", "viewer", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        commenter: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        creator: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        editor: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        guest: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        owner: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        viewer: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VisibilityRuleReqItemDisabled':
        return super().__new__(
            cls,
            *args,
            commenter=commenter,
            creator=creator,
            editor=editor,
            guest=guest,
            owner=owner,
            viewer=viewer,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.model_bool import ModelBool
