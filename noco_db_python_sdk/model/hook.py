# coding: utf-8

"""
    NocoDB v2

    NocoDB API Documentation

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from noco_db_python_sdk import schemas  # noqa: F401


class Hook(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Model for Hook
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class version(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "v1": "V1",
                        "v2": "V2",
                    }
                
                @schemas.classproperty
                def V1(cls):
                    return cls("v1")
                
                @schemas.classproperty
                def V2(cls):
                    return cls("v2")
        
            @staticmethod
            def active() -> typing.Type['ModelBool']:
                return ModelBool
        
            @staticmethod
            def _async() -> typing.Type['ModelBool']:
                return ModelBool
            env = schemas.StrSchema
            
            
            class event(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "after": "AFTER",
                        "before": "BEFORE",
                    }
                
                @schemas.classproperty
                def AFTER(cls):
                    return cls("after")
                
                @schemas.classproperty
                def BEFORE(cls):
                    return cls("before")
            fk_model_id = schemas.StrSchema
        
            @staticmethod
            def id() -> typing.Type['Id']:
                return Id
            notification = schemas.AnyTypeSchema
            
            
            class operation(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "insert": "INSERT",
                        "update": "UPDATE",
                        "delete": "DELETE",
                        "bulkInsert": "BULK_INSERT",
                        "bulkUpdate": "BULK_UPDATE",
                        "bulkDelete": "BULK_DELETE",
                    }
                
                @schemas.classproperty
                def INSERT(cls):
                    return cls("insert")
                
                @schemas.classproperty
                def UPDATE(cls):
                    return cls("update")
                
                @schemas.classproperty
                def DELETE(cls):
                    return cls("delete")
                
                @schemas.classproperty
                def BULK_INSERT(cls):
                    return cls("bulkInsert")
                
                @schemas.classproperty
                def BULK_UPDATE(cls):
                    return cls("bulkUpdate")
                
                @schemas.classproperty
                def BULK_DELETE(cls):
                    return cls("bulkDelete")
            retries = schemas.NumberSchema
            retry_interval = schemas.NumberSchema
            timeout = schemas.NumberSchema
            type = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "description": description,
                "version": version,
                "active": active,
                "async": _async,
                "env": env,
                "event": event,
                "fk_model_id": fk_model_id,
                "id": id,
                "notification": notification,
                "operation": operation,
                "retries": retries,
                "retry_interval": retry_interval,
                "timeout": timeout,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["async"]) -> 'ModelBool': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["env"]) -> MetaOapg.properties.env: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event"]) -> MetaOapg.properties.event: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fk_model_id"]) -> MetaOapg.properties.fk_model_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'Id': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notification"]) -> MetaOapg.properties.notification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operation"]) -> MetaOapg.properties.operation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retries"]) -> MetaOapg.properties.retries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retry_interval"]) -> MetaOapg.properties.retry_interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeout"]) -> MetaOapg.properties.timeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "version", "active", "async", "env", "event", "fk_model_id", "id", "notification", "operation", "retries", "retry_interval", "timeout", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["async"]) -> typing.Union['ModelBool', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["env"]) -> typing.Union[MetaOapg.properties.env, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event"]) -> typing.Union[MetaOapg.properties.event, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fk_model_id"]) -> typing.Union[MetaOapg.properties.fk_model_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union['Id', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notification"]) -> typing.Union[MetaOapg.properties.notification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> typing.Union[MetaOapg.properties.operation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retries"]) -> typing.Union[MetaOapg.properties.retries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retry_interval"]) -> typing.Union[MetaOapg.properties.retry_interval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeout"]) -> typing.Union[MetaOapg.properties.timeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "version", "active", "async", "env", "event", "fk_model_id", "id", "notification", "operation", "retries", "retry_interval", "timeout", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        active: typing.Union['ModelBool', schemas.Unset] = schemas.unset,
        env: typing.Union[MetaOapg.properties.env, str, schemas.Unset] = schemas.unset,
        event: typing.Union[MetaOapg.properties.event, str, schemas.Unset] = schemas.unset,
        fk_model_id: typing.Union[MetaOapg.properties.fk_model_id, str, schemas.Unset] = schemas.unset,
        id: typing.Union['Id', schemas.Unset] = schemas.unset,
        notification: typing.Union[MetaOapg.properties.notification, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        operation: typing.Union[MetaOapg.properties.operation, str, schemas.Unset] = schemas.unset,
        retries: typing.Union[MetaOapg.properties.retries, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        retry_interval: typing.Union[MetaOapg.properties.retry_interval, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        timeout: typing.Union[MetaOapg.properties.timeout, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Hook':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            version=version,
            active=active,
            env=env,
            event=event,
            fk_model_id=fk_model_id,
            id=id,
            notification=notification,
            operation=operation,
            retries=retries,
            retry_interval=retry_interval,
            timeout=timeout,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from noco_db_python_sdk.model.id import Id
from noco_db_python_sdk.model.model_bool import ModelBool
